version: 0.2
env:
  variables:
    ECR_REPO_NAME: ecr-repo-image
    cluster_name: karpenter-terraform
    AWS_ACCOUNT_ID: 779316103690
    AWS_REGION: ap-south-1

  secret-manager:
    DOCKERHUB_TOKEN: java-cicd-pmg:token
    DOCKERHUB_USER: java-cicd-pmg:user
    AWS_ACCOUNT: account-id-sso:AWS_ACCOUNT_ID
phases:
  install:
    runtime-versions:
      java: corretto11
    commands:
        #- apt-get install -y wget gnupg
        #- wget -O https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
        #- echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        - apt-get install unzip
        - wget https://releases.hashicorp.com/terraform/1.3.7/terraform_1.3.7_linux_amd64.zip 
        - unzip terraform_1.3.7_linux_amd64.zip
        #- wget https://releases.hashicorp.com/terraform/0.15.0/terraform_0.15.0_linux_amd64.zip
        #- wget -q https://releases.hashicorp.com/terraform/$(curl -s https://releases.hashicorp.com/terraform/index.json | jq -r '.versions[0].version')/terraform_$(curl -s https://releases.hashicorp.com/terraform/index.json | jq -r '.versions[0].version')_linux_amd64.zip
        #- unzip terraform_$(curl -s https://releases.hashicorp.com/terraform/index.json | jq -r '.versions[0].version')_linux_amd64.zip
        - mv terraform /usr/local/bin/
        #- unzip terraform_0.15.0_linux_amd64.zip
        #- mv terraform /usr/local/bin/
        - terraform -v
        - echo "terraform installed successfully..."
        #- sudo apt update && sudo apt install terraform
#   pre_build:
#     commands:
#       - echo "Logging in to Amazon ECR..."
#       - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com
#       - ECR_MAIN_URI="${AWS_ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com"
#       - ECR_IMAGE_URI="${ECR_MAIN_URI}/${ECR_REPO_NAME}:latest"
#       - echo "Login successfull..."
#       #- echo "creating a ecr repo"
#       #- aws cloudformation deploy --template-file ecr.yaml --stack-name repo-ecr --region ap-south-1 --no-fail-on-empty-changeset --disable-rollback
#       #- aws cloudformation wait stack-create-complete --stack-name ecrstack
#       #- echo "ecr repo created successfully..."
#   build:
#     commands: 
#       - echo "creating eks cluster ..."
#       - terraform init
#       - terraform apply -auto-approve
#       - echo "setting the eks context aws-auth configmap..."
#       - kubectl config get-contexts
#       - echo "Updating aws-auth ConfigMap for EKS cluster"
#       - aws eks update-kubeconfig --name ${Cluster_name} --region ap-south-1
#       - kubectl apply -f aws-auth-configmap.yaml 
#       - echo "eks authentication configmap set successfully... "
#       - echo "building docker image..."
#       - docker build -t ecr-repo-image .
#       - docker tag ecr-repo-image:latest ${AWS_ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/ecr-repo-image:latest
#       - echo "pushing image to ECR"
#       - docker push ${AWS_ACCOUNT_ID}.dkr.ecr.ap-south-1.amazonaws.com/ecr-repo-image:latest
#       - echo "successfully pushed image... check ECR repo"
      
#   post_build:
#     commands:
#       - echo '[{"name":"ecr-repo-image","imageUri":"%s"}]' ${ECR_IMAGE_URI} > imagedefinitions.json
#       - echo "artifacts uploading done..."
#       - kubectl apply -f $CODEBUILD_SRC_DIR/deployment.yaml
#       - kubectl get nodes
#       - kubectl get deployments -n motadata
#       - kubectl get ns 
#       - kubectl describe service java-app-service -n motadata
#       - kubectl get svc -n motadata
# artifacts:
#   files:
#     - imagedefinitions.json